name: E2E Tests

on:
  pull_request:
    branches: [main]

jobs:
  # Wait for CI workflow checks to pass
  wait-for-ci:
    name: Wait for CI Checks
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "20"
          cache: "npm"

      - name: Install dependencies
        run: npm ci

      - name: Check formatting
        run: npm run format:check

      - name: Run linting
        run: npm run lint

      - name: Type checking
        run: npm run type-check

      - name: Run unit tests
        run: npm run test:run

  build-app:
    name: Build Application
    needs: wait-for-ci # Only build if all checks pass
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "20"
          cache: "npm"

      - name: Install dependencies
        run: npm ci

      - name: Build application
        run: npm run build

      - name: Build Docker image
        run: |
          docker build -t project-beta-frontend:e2e-${{ github.sha }} .
          docker save project-beta-frontend:e2e-${{ github.sha }} > app-image.tar

      - name: Upload Docker image artifact
        uses: actions/upload-artifact@v4
        with:
          name: app-image
          path: app-image.tar
          retention-days: 1

  e2e-tests:
    name: E2E Tests (${{ matrix.browser }} - Shard ${{ matrix.shard }})
    needs: [wait-for-ci, build-app] # Must pass all CI checks and have built app
    runs-on: ubuntu-latest
    container:
      image: mcr.microsoft.com/playwright:v1.55.0-noble
      options: --user 1001
    strategy:
      fail-fast: false
      matrix:
        browser: [chromium, firefox, webkit]
        shard: [1, 2]
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "20"
          cache: "npm"

      - name: Install dependencies
        run: npm ci

      - name: Download Docker image artifact
        uses: actions/download-artifact@v4
        with:
          name: app-image

      - name: Load Docker image
        run: docker load < app-image.tar

      - name: Start application container
        run: |
          docker run -d \
            --name app \
            --network host \
            -e NODE_ENV=test \
            project-beta-frontend:e2e-${{ github.sha }}

          # Wait for application to be ready
          timeout 30 sh -c 'until curl -f http://localhost:3000 > /dev/null 2>&1; do sleep 1; done'

      - name: Run Playwright tests
        env:
          BASE_URL: http://localhost:3000
          MOCK_API: "true"
        run: |
          npx playwright test \
            --project=${{ matrix.browser }} \
            --shard=${{ matrix.shard }}/2 \
            --reporter=json,html,github

      - name: Upload test results
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: playwright-results-${{ matrix.browser }}-${{ matrix.shard }}
          path: |
            test-results/
            playwright-report/
          retention-days: 30

      - name: Upload videos on failure
        if: failure()
        uses: actions/upload-artifact@v4
        with:
          name: playwright-videos-${{ matrix.browser }}-${{ matrix.shard }}
          path: test-results/**/video.webm
          retention-days: 7

  e2e-report:
    name: Merge E2E Test Reports
    needs: e2e-tests
    if: always()
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Download all artifacts
        uses: actions/download-artifact@v4
        with:
          pattern: playwright-results-*
          path: all-results/

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "20"

      - name: Install Playwright
        run: npm install -D @playwright/test

      - name: Merge reports
        run: npx playwright merge-reports --reporter=html all-results/

      - name: Upload merged report
        uses: actions/upload-artifact@v4
        with:
          name: playwright-report-merged
          path: playwright-report/
          retention-days: 30

      - name: Comment PR with results
        if: github.event_name == 'pull_request'
        uses: actions/github-script@v7
        with:
          script: |
            const fs = require('fs');
            const path = require('path');

            // Read test results
            let allPassed = true;
            let resultsText = '## üé≠ Playwright E2E Test Results\n\n';

            const resultsDir = './all-results';
            if (fs.existsSync(resultsDir)) {
              const files = fs.readdirSync(resultsDir);
              
              files.forEach(file => {
                const resultPath = path.join(resultsDir, file, 'results.json');
                if (fs.existsSync(resultPath)) {
                  const results = JSON.parse(fs.readFileSync(resultPath, 'utf8'));
                  const passed = results.suites.every(s => s.specs.every(spec => spec.ok));
                  allPassed = allPassed && passed;
                  
                  const [, browser, shard] = file.match(/playwright-results-(\w+)-(\d+)/) || [];
                  resultsText += `- **${browser} (Shard ${shard})**: ${passed ? '‚úÖ Passed' : '‚ùå Failed'}\n`;
                }
              });
            }

            resultsText += '\n';
            resultsText += allPassed 
              ? '‚ú® All tests passed successfully!' 
              : '‚ö†Ô∏è Some tests failed. Check the artifacts for details.';

            resultsText += '\n\n[View Full Report](https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }})';

            // Post comment
            await github.rest.issues.createComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.issue.number,
              body: resultsText
            });

  smoke-tests:
    name: Smoke Tests (Quick Validation)
    needs: wait-for-ci # Only run smoke tests if all CI checks pass
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "20"
          cache: "npm"

      - name: Install dependencies
        run: npm ci

      - name: Install Playwright browsers
        run: npx playwright install chromium

      - name: Run smoke tests
        env:
          MOCK_API: "true"
        run: |
          npx playwright test \
            --project=chromium \
            --grep=@smoke \
            --reporter=github

      - name: Upload smoke test results
        if: failure()
        uses: actions/upload-artifact@v4
        with:
          name: smoke-test-results
          path: test-results/
          retention-days: 7
