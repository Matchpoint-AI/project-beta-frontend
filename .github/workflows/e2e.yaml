name: E2E Tests

on:
  pull_request:
    branches: [main]

env:
  NODE_VERSION: "20"

jobs:
  # Run after CI build completes successfully
  e2e-health-check:
    name: E2E Health Check
    runs-on: ubuntu-latest
    outputs:
      should-continue: ${{ steps.health.outputs.should-continue }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: "npm"

      - name: Install dependencies
        run: npm ci

      - name: Build application
        run: npm run build

      - name: Start application
        run: |
          npm install -g serve
          serve -s dist -p 3000 &
          echo $! > server.pid
          sleep 10

      - name: Run health check
        id: health
        run: |
          chmod +x scripts/e2e/health-check.sh
          if ./scripts/e2e/health-check.sh; then
            echo "should-continue=true" >> $GITHUB_OUTPUT
            echo "✅ Application health check passed"
          else
            echo "should-continue=false" >> $GITHUB_OUTPUT
            echo "❌ Application health check failed"
          fi

      - name: Stop application
        if: always()
        run: |
          if [ -f server.pid ]; then
            kill $(cat server.pid) 2>/dev/null || true
            rm server.pid
          fi

  e2e-brand-onboarding:
    name: E2E Brand Onboarding Tests
    needs: e2e-health-check
    if: ${{ needs.e2e-health-check.outputs.should-continue == 'true' }}
    runs-on: ubuntu-latest
    timeout-minutes: 10
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: "npm"

      - name: Install dependencies
        run: npm ci

      - name: Build application
        run: npm run build

      - name: Start application
        run: |
          npm install -g serve
          serve -s dist -p 3000 &
          echo $! > server.pid
          sleep 15

      - name: Run brand onboarding E2E tests
        run: |
          chmod +x scripts/e2e/brand-onboarding.sh
          ./scripts/e2e/brand-onboarding.sh
        env:
          APP_URL: http://localhost:3000

      - name: Stop application
        if: always()
        run: |
          if [ -f server.pid ]; then
            kill $(cat server.pid) 2>/dev/null || true
            rm server.pid
          fi

      - name: Upload test videos
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: e2e-brand-onboarding-videos
          path: |
            test-results/**/*.webm
            test-results/**/*.mp4
          retention-days: 7
          if-no-files-found: ignore

      - name: Upload test screenshots
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: e2e-brand-onboarding-screenshots
          path: |
            test-results/**/*.png
            test-results/**/*.jpg
          retention-days: 7
          if-no-files-found: ignore

      - name: Upload test results
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: e2e-brand-onboarding-results
          path: |
            test-results/
            playwright-report/
          retention-days: 7

  e2e-playwright-all:
    name: E2E Playwright All Tests
    needs: e2e-brand-onboarding
    if: success()
    runs-on: ubuntu-latest
    timeout-minutes: 15
    strategy:
      fail-fast: false
      matrix:
        browser: [chromium, firefox]
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: "npm"

      - name: Install dependencies
        run: npm ci

      - name: Build application
        run: npm run build

      - name: Start application
        run: |
          npm install -g serve
          serve -s dist -p 3000 &
          echo $! > server.pid
          sleep 15

      - name: Run comprehensive Playwright tests
        run: |
          chmod +x scripts/e2e/playwright-all.sh
          BROWSER=${{ matrix.browser }} ./scripts/e2e/playwright-all.sh all
        env:
          APP_URL: http://localhost:3000
          BROWSER: ${{ matrix.browser }}
          WORKERS: "1"
          RETRIES: "2"

      - name: Stop application
        if: always()
        run: |
          if [ -f server.pid ]; then
            kill $(cat server.pid) 2>/dev/null || true
            rm server.pid
          fi

      - name: Upload test videos
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: e2e-videos-${{ matrix.browser }}
          path: |
            test-results/**/*.webm
            test-results/**/*.mp4
          retention-days: 7
          if-no-files-found: ignore

      - name: Upload test screenshots
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: e2e-screenshots-${{ matrix.browser }}
          path: |
            test-results/**/*.png
            test-results/**/*.jpg
            test-results/**/*.jpeg
          retention-days: 7
          if-no-files-found: ignore

      - name: Upload trace files
        if: failure()
        uses: actions/upload-artifact@v4
        with:
          name: e2e-traces-${{ matrix.browser }}
          path: test-results/**/*.zip
          retention-days: 7
          if-no-files-found: ignore

      - name: Upload test results
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: e2e-results-${{ matrix.browser }}
          path: |
            test-results/
            playwright-report/
          retention-days: 7

  e2e-report:
    name: Generate E2E Test Report
    needs: [e2e-brand-onboarding, e2e-playwright-all]
    if: always()
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Download all E2E artifacts
        uses: actions/download-artifact@v4
        with:
          pattern: e2e-*-results
          path: all-results/

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: Install Playwright
        run: npm install -D @playwright/test

      - name: Merge reports
        run: |
          if [ -d all-results ] && [ "$(ls -A all-results)" ]; then
            npx playwright merge-reports --reporter=html all-results/
          else
            echo "No results to merge"
          fi

      - name: Upload merged report
        if: success()
        uses: actions/upload-artifact@v4
        with:
          name: e2e-report-merged
          path: playwright-report/
          retention-days: 30

      - name: Comment PR with E2E results
        if: github.event_name == 'pull_request' && always()
        uses: actions/github-script@v7
        with:
          script: |
            const resultsText = `## 🎭 E2E Test Results

            ### Test Summary
            - ✅ Health Check: Completed
            - 🏢 Brand Onboarding Tests: ${{ needs.e2e-brand-onboarding.result == 'success' && '✅ Passed' || '❌ Failed' }}
            - 🎪 Playwright All Tests: ${{ needs.e2e-playwright-all.result == 'success' && '✅ Passed' || '❌ Failed' }}

            ### 📦 Test Artifacts Available
            - [📹 Video Recordings](https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }}#artifacts)
            - [📸 Screenshots](https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }}#artifacts)
            - [📊 HTML Reports](https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }}#artifacts)
            - [🔍 Trace Files](https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }}#artifacts) (on failures)

            ### 🔗 Links
            - [View Full Workflow](https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }})
            - [Download All Artifacts](https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }}#artifacts)
            
            **✨ Video recordings are now captured for all E2E tests and available for review!**
            `;

            await github.rest.issues.createComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.issue.number,
              body: resultsText
            });

  e2e-smoke-tests:
    name: E2E Smoke Tests
    needs: e2e-health-check
    if: ${{ needs.e2e-health-check.outputs.should-continue == 'true' }}
    runs-on: ubuntu-latest
    timeout-minutes: 5
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: "npm"

      - name: Install dependencies
        run: npm ci

      - name: Build application
        run: npm run build

      - name: Start application
        run: |
          npm install -g serve
          serve -s dist -p 3000 &
          echo $! > server.pid
          sleep 10

      - name: Run smoke tests directly
        run: |
          npx playwright test e2e/smoke.spec.ts --project=chromium --reporter=json,github --timeout=10000
        env:
          BASE_URL: http://localhost:3000
          MOCK_API: "true"
          CI: "true"

      - name: Stop application
        if: always()
        run: |
          if [ -f server.pid ]; then
            kill $(cat server.pid) 2>/dev/null || true
            rm server.pid
          fi

      - name: Upload smoke test results
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: e2e-smoke-test-results
          path: |
            test-results/
            playwright-report/
          retention-days: 7
